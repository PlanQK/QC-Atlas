/*******************************************************************************
 * Copyright (c) 2020 University of Stuttgart
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/

package org.planqk.atlas.core.services;

import java.util.UUID;

import org.planqk.atlas.core.model.DiscussionComment;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

/**
 * Service class for operations related to interacting and modifying {@link DiscussionComment}s in the database.
 */
public interface DiscussionCommentService {

    /**
     * Creates a new database entry for a given {@link DiscussionComment} and save it to the database.
     * <p>
     * The ID of the {@link DiscussionComment} parameter should be null, since the ID will be generated by the database
     * when creating the entry.
     * The validation for this is done by the Controller layer, which will reject {@link DiscussionComment}s with a given ID in
     * its create path.
     *
     * @param discussionComment The {@link DiscussionComment} that should be saved to the database
     * @return The {@link DiscussionComment} object that represents the saved status from the database
     */
    @Transactional
    DiscussionComment create(DiscussionComment discussionComment);

    /**
     * Retrieve multiple {@link DiscussionComment} entries from the database.
     * <p>
     * The amount of entries is based on the given {@link Pageable} parameter.
     * If the page number of the {@link Pageable} is set to '-1' a {@link Page} with all entries is queried.
     *
     * @param pageable The page information, namely page size and page number, of the page we want to retrieve
     * @return The page of queried {@link DiscussionComment} entries
     */
    Page<DiscussionComment> findAll(Pageable pageable);

    /**
     * Retrieve multiple {@link DiscussionComment} entries from the database which are related to the given
     * {@link org.planqk.atlas.core.model.DiscussionTopic}.
     * <p>
     * The amount of entries is based on the given {@link Pageable} parameter.
     * If the page number of the {@link Pageable} is set to '-1' a {@link Page} with all entries is queried.
     *
     * @param topicId The ID of the {@link org.planqk.atlas.core.model.DiscussionTopic} we want to find {@link DiscussionComment}s
     *                for
     * @param pageable The page information, namely page size and page number, of the page we want to retrieve
     * @return The page of queried {@link DiscussionComment} entries
     */
    Page<DiscussionComment> findAllByTopic(UUID topicId, Pageable pageable);

    /**
     * Find a database entry of a {@link DiscussionComment} that is already saved in the database.
     * This search is based on the ID the database has given the {@link DiscussionComment}
     * object when it was created and first saved to the database.
     * <p>
     * If there is no entry found in the database this method will throw a {@link java.util.NoSuchElementException}.
     *
     * @param commentId The ID of the {@link DiscussionComment} we want to find
     * @return The {@link DiscussionComment} with the given ID
     */
    DiscussionComment findById(UUID commentId);

    /**
     * Update an existing {@link DiscussionComment} database entry by saving the updated {@link DiscussionComment} object
     * to the the database.
     * <p>
     * The ID of the {@link DiscussionComment} parameter has to be set to the ID of the database entry we want to update.
     * The validation for this ID to be set is done by the Controller layer, which will reject {@link DiscussionComment}s
     * without a given ID in its update path.
     * This ID will be used to query the existing {@link DiscussionComment} entry we want to update.
     * If no {@link DiscussionComment} entry with the given ID is found this method will throw a
     * {@link java.util.NoSuchElementException}.
     *
     * @param comment The {@link DiscussionComment} we want to update with its updated properties
     * @return the updated {@link DiscussionComment} object that represents the updated status of the database
     */
    @Transactional
    DiscussionComment update(DiscussionComment comment);

    /**
     * Delete an existing {@link DiscussionComment} entry from the database.
     * This deletion is based on the ID the database has given the {@link DiscussionComment}
     * when it was created and first saved to the database.
     * <p>
     * If no entry with the given ID is found this method will throw a {@link java.util.NoSuchElementException}.
     *
     * @param commentId The ID of the {@link DiscussionComment} we want to delete
     */
    @Transactional
    void delete(UUID commentId);

    /**
     * Checks if a given {@link DiscussionComment} is made in a given {@link org.planqk.atlas.core.model.DiscussionTopic}.
     * <p>
     * If either the {@link DiscussionComment} or the {@link org.planqk.atlas.core.model.DiscussionTopic} with given IDs
     * could not be found or if a database entry for both could be found but they are not linked a
     * {@link java.util.NoSuchElementException} is thrown.
     *
     * @param commentId The ID of the {@link DiscussionComment} we want to check
     * @param topicId The ID of the {@link org.planqk.atlas.core.model.DiscussionTopic} we want to check
     */
    void checkIfDiscussionCommentIsInDiscussionTopic(UUID commentId, UUID topicId);
}
