/*******************************************************************************
 * Copyright (c) 2020 the qc-atlas contributors.
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/

package org.planqk.atlas.core.services;

import java.util.UUID;

import org.planqk.atlas.core.model.TOSCAImplementationPackage;
import org.springframework.transaction.annotation.Transactional;

public interface TOSCAImplementationPackageService {

    /**
     * Creates a new database entry for a given {@link TOSCAImplementationPackage} and save it to the database.
     * <p>
     * The ID of the {@link TOSCAImplementationPackage} parameter should be null, since the ID will be generated by the database when creating the entry. The
     * validation for this is done by the Controller layer, which will reject {@link TOSCAImplementationPackage}s with a given ID in its create path.
     *
     * @param toscaImplementationPackage The {@link TOSCAImplementationPackage} that should be saved to the database
     * @return The {@link TOSCAImplementationPackage} object that represents the saved status from the database
     */
    @Transactional
    TOSCAImplementationPackage create(TOSCAImplementationPackage toscaImplementationPackage);

    /**
     * Update an existing {@link TOSCAImplementationPackage} database entry by saving the updated {@link TOSCAImplementationPackage}
     * object to the the database.
     * <p>
     * The ID of the {@link TOSCAImplementationPackage} parameter has to be set to the ID of the database entry we want to update. The
     * validation for this ID to be set is done by the Controller layer, which will reject {@link TOSCAImplementationPackage}s without a given
     * ID in its update path. This ID will be used to query the existing {@link TOSCAImplementationPackage} entry we want to update. If no
     * {@link TOSCAImplementationPackage} entry with the given ID is found this method will throw a {@link java.util.NoSuchElementException}.
     *
     * @param defaultFileImplementationPackage The {@link TOSCAImplementationPackage} we want to update with its updated properties
     * @return the updated {@link TOSCAImplementationPackage} object that represents the updated status of the database
     */
    @Transactional
    TOSCAImplementationPackage update(TOSCAImplementationPackage defaultFileImplementationPackage);

    /**
     * Delete an existing {@link TOSCAImplementationPackage} entry from the database. This deletion is based on the ID the database has given
     * the {@link TOSCAImplementationPackage} when it was created and first saved to the database.
     * <p>
     * When deleting an {@link TOSCAImplementationPackage} related {@link org.planqk.atlas.core.model.TOSCAImplementationPackage}s will be
     * deleted together with it.
     * <p>
     * Objects that can be related to multiple {@link TOSCAImplementationPackage}s will not be deleted. Only the reference to the deleted {@link
     * org.planqk.atlas.core.model.Implementation} will be removed from these objects.
     * <p>
     * If no entry with the given ID is found this method will throw a {@link java.util.NoSuchElementException}.
     * <p>
     * If the {@link TOSCAImplementationPackage} is still referenced by at least one {@link org.planqk.atlas.core.model.Implementation} a {@link
     * org.planqk.atlas.core.exceptions.EntityReferenceConstraintViolationException} will be thrown.
     *
     * @param toscaImplementationPackageId The ID of the {@link TOSCAImplementationPackage} we want to delete
     */
    @Transactional
    void delete(UUID toscaImplementationPackageId);
}
