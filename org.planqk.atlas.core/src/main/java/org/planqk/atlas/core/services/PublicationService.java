/*******************************************************************************
 * Copyright (c) 2020 the qc-atlas contributors.
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/

package org.planqk.atlas.core.services;

import java.util.Set;
import java.util.UUID;

import org.planqk.atlas.core.model.Algorithm;
import org.planqk.atlas.core.model.Implementation;
import org.planqk.atlas.core.model.Publication;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

/**
 * Service class for operations related to interacting and modifying {@link Publication}s in the database.
 */
public interface PublicationService {

    /**
     * Creates a new database entry for a given {@link Publication} and save it to the database.
     * <p>
     * The ID of the {@link Publication} parameter should be null, since the ID will be generated by the database when creating the entry. The
     * validation for this is done by the Controller layer, which will reject {@link Publication}s with a given ID in its create path.
     *
     * @param publication The {@link Publication} that should be saved to the database
     * @return The {@link Publication} object that represents the saved status from the database
     */
    @Transactional
    Publication create(Publication publication);

    /**
     * Retrieve multiple {@link Publication} entries from the database.
     * <p>
     * The amount of entries is based on the given {@link Pageable} parameter. If the {@link Pageable} is unpaged a {@link Page} with all entries is
     * queried.
     * <p>
     * If no search should be executed the search parameter can be left null or empty.
     *
     * @param pageable The page information, namely page size and page number, of the page we want to retrieve
     * @param search   The string based on which a search will be executed
     * @return The page of queried {@link Publication} entries
     */
    Page<Publication> findAll(Pageable pageable, String search);

    /**
     * Find a database entry of a {@link Publication} that is already saved in the database. This search is based on the ID the database has given the
     * {@link Publication} object when it was created and first saved to the database.
     * <p>
     * If there is no entry found in the database this method will throw a {@link java.util.NoSuchElementException}.
     *
     * @param publicationId The ID of the {@link Publication} we want to find
     * @return The {@link Publication} with the given ID
     */
    Publication findById(UUID publicationId);

    /**
     * Update an existing {@link Publication} database entry by saving the updated {@link Publication} object to the the database.
     * <p>
     * The ID of the {@link Publication} parameter has to be set to the ID of the database entry we want to update. The validation for this ID to be
     * set is done by the Controller layer, which will reject {@link Publication}s without a given ID in its update path. This ID will be used to
     * query the existing {@link Publication} entry we want to update. If no {@link Publication} entry with the given ID is found this method will
     * throw a {@link java.util.NoSuchElementException}.
     *
     * @param publication The {@link Publication} we want to update with its updated properties
     * @return the updated {@link Publication} object that represents the updated status of the database
     */
    @Transactional
    Publication update(Publication publication);

    /**
     * Delete an existing {@link Publication} entry from the database. This deletion is based on the ID the database has given the {@link Publication}
     * when it was created and first saved to the database.
     * <p>
     * If no entry with the given ID is found this method will throw a {@link java.util.NoSuchElementException}.
     * <p>
     * Objects that can be related to multiple {@link Publication}s will not be deleted. Only the reference to the deleted {@link Publication} will be
     * removed from these objects. These include {@link Algorithm}s and  {@link Implementation}s.
     *
     * @param publicationId The ID of the {@link Publication} we want to delete
     */
    @Transactional
    void delete(UUID publicationId);

    /**
     * <p>
     * Delete multiple existing {@link Publication} entry from the database. This deletion is based on the ID the database has given the {@link
     * Publication}s when they were created and first saved to the database.
     * <p>
     * If at least one entry with a given ID is not found this method will throw a {@link java.util.NoSuchElementException}.
     *
     * @param publicationIds The IDs of the {@link Publication}s we want to delete
     */
    @Transactional
    void deletePublications(Set<UUID> publicationIds);

    /**
     * Retrieve multiple {@link Algorithm}s entries from the database of {@link Algorithm}s that are linked to the given {@link Publication} If no
     * entries are found an empty page is returned.
     * <p>
     * The amount of entries is based on the given {@link Pageable} parameter. If the {@link Pageable} is unpaged a {@link Page} with all entries is
     * queried.
     * <p>
     * The given {@link Publication} is identified through its ID given as a parameter. If no {@link Publication} with the given ID can be found a
     * {@link java.util.NoSuchElementException} is thrown.
     *
     * @param publicationId The ID of the {@link Publication} we want find linked {@link Algorithm}s for
     * @param pageable      The page information, namely page size and page number, of the page we want to retrieve
     * @return The page of queried {@link Algorithm} entries which are linked to the {@link Publication}
     */
    Page<Algorithm> findLinkedAlgorithms(UUID publicationId, Pageable pageable);

    /**
     * Retrieve multiple {@link Implementation}s entries from the database of {@link Implementation}s that are linked to the given {@link Publication}
     * If no entries are found an empty page is returned.
     * <p>
     * The amount of entries is based on the given {@link Pageable} parameter. If the {@link Pageable} is unpaged a {@link Page} with all entries is
     * queried.
     * <p>
     * The given {@link Publication} is identified through its ID given as a parameter. If no {@link Publication} with the given ID can be found a
     * {@link java.util.NoSuchElementException} is thrown.
     *
     * @param publicationId The ID of the {@link Publication} we want find linked {@link Implementation}s for
     * @param pageable      The page information, namely page size and page number, of the page we want to retrieve
     * @return The page of queried {@link Implementation} entries which are linked to the {@link Publication}
     */
    Page<Implementation> findLinkedImplementations(UUID publicationId, Pageable pageable);

    /**
     * Checks if a given {@link Algorithm} is linked to a given {@link Publication}.
     * <p>
     * If either the {@link Algorithm} or the {@link Publication} with given IDs could not be found or if a database entry for both could be found but
     * they are not linked a {@link java.util.NoSuchElementException} is thrown.
     *
     * @param publicationId The ID of the {@link Publication} we want to check
     * @param algorithmId   The ID of the {@link Algorithm} we want to check
     */
    void checkIfAlgorithmIsLinkedToPublication(UUID publicationId, UUID algorithmId);

    /**
     * Checks if a given {@link Implementation} is linked to a given {@link Publication}.
     * <p>
     * If either the {@link Implementation} or the {@link Publication} with given IDs could not be found or if a database entry for both could be
     * found but they are not linked a {@link java.util.NoSuchElementException} is thrown.
     *
     * @param publicationId    The ID of the {@link Publication} we want to check
     * @param implementationId The ID of the {@link Implementation} we want to check
     */
    void checkIfImplementationIsLinkedToPublication(UUID publicationId, UUID implementationId);
}
