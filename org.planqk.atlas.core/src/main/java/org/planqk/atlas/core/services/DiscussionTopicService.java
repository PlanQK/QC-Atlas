/*******************************************************************************
 * Copyright (c) 2020 the qc-atlas contributors.
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/

package org.planqk.atlas.core.services;

import java.util.UUID;

import org.planqk.atlas.core.model.DiscussionTopic;
import org.planqk.atlas.core.model.KnowledgeArtifact;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

/**
 * Service class for operations related to interacting and modifying {@link DiscussionTopic}s in the database.
 */
public interface DiscussionTopicService {

    /**
     * Creates a new database entry for a given {@link DiscussionTopic} and save it to the database.
     * <p>
     * The ID of the {@link DiscussionTopic} parameter should be null, since the ID will be generated by the database when creating the entry. The
     * validation for this is done by the Controller layer, which will reject {@link DiscussionTopic}s with a given ID in its create path.
     *
     * @param discussionTopic The {@link DiscussionTopic} that should be saved to the database
     * @return The {@link DiscussionTopic} object that represents the saved status from the database
     */
    @Transactional
    DiscussionTopic create(DiscussionTopic discussionTopic);

    /**
     * Retrieve multiple {@link DiscussionTopic} entries from the database.
     * <p>
     * The amount of entries is based on the given {@link Pageable} parameter. If the {@link Pageable} is unpaged a {@link Page} with all entries is
     * queried.
     *
     * @param pageable The page information, namely page size and page number, of the page we want to retrieve
     * @return The page of queried {@link DiscussionTopic} entries
     */
    Page<DiscussionTopic> findAll(Pageable pageable);

    /**
     * Retrieve multiple {@link DiscussionTopic} entries from the database of a given {@link KnowledgeArtifact}.
     * <p>
     * The amount of entries is based on the given {@link Pageable} parameter. If the {@link Pageable} is unpaged a {@link Page} with all entries is
     * queried.
     *
     * @param knowledgeArtifact The {@link KnowledgeArtifact} we want to update with its updated properties
     * @param pageable          The page information, namely page size and page number, of the page we want to retrieve
     * @return The page of queried {@link DiscussionTopic} entries of a given {@link KnowledgeArtifact}
     */
    Page<DiscussionTopic> findByKnowledgeArtifact(KnowledgeArtifact knowledgeArtifact, Pageable pageable);

    /**
     * Find a database entry of a {@link DiscussionTopic} that is already saved in the database. This search is based on the ID the database has given
     * the {@link DiscussionTopic} object when it was created and first saved to the database.
     * <p>
     * If there is no entry found in the database this method will throw a {@link java.util.NoSuchElementException}.
     *
     * @param topicId The ID of the {@link DiscussionTopic} we want to find
     * @return The {@link DiscussionTopic} with the given ID
     */
    DiscussionTopic findById(UUID topicId);

    /**
     * Update an existing {@link DiscussionTopic} database entry by saving the updated {@link DiscussionTopic} object to the the database.
     * <p>
     * The ID of the {@link DiscussionTopic} parameter has to be set to the ID of the database entry we want to update. The validation for this ID to
     * be set is done by the Controller layer, which will reject {@link DiscussionTopic}s without a given ID in its update path. This ID will be used
     * to query the existing {@link DiscussionTopic} entry we want to update. If no {@link DiscussionTopic} entry with the given ID is found this
     * method will throw a {@link java.util.NoSuchElementException}.
     *
     * @param topic The {@link DiscussionTopic} we want to update with its updated properties
     * @return the updated {@link DiscussionTopic} object that represents the updated status of the database
     */
    @Transactional
    DiscussionTopic update(DiscussionTopic topic);

    /**
     * Delete an existing {@link DiscussionTopic} entry from the database. This deletion is based on the ID the database has given the {@link
     * DiscussionTopic} when it was created and first saved to the database.
     * <p>
     * When deleting a {@link DiscussionTopic} all {@link org.planqk.atlas.core.model.DiscussionComment}s of the topic will be deleted as well.
     * <p>
     * If no entry with the given ID is found this method will throw a {@link java.util.NoSuchElementException}.
     *
     * @param topicId The ID of the {@link DiscussionTopic} we want to delete
     */
    @Transactional
    void delete(UUID topicId);
}
